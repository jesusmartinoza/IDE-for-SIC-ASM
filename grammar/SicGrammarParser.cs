//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\SicGrammar.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class SicGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, RSUB=4, INSTRUCCIONES=5, TIPODIRECTIVA=6, BYTEOP=7, 
		NUM=8, FINL=9, NUMH=10, NUMHH=11, ID=12, INDEX=13, SEP=14;
	public const int
		RULE_programa = 0, RULE_inicio = 1, RULE_fin = 2, RULE_proposicion = 3, 
		RULE_instruccion = 4, RULE_directiva = 5;
	public static readonly string[] ruleNames = {
		"programa", "inicio", "fin", "proposicion", "instruccion", "directiva"
	};

	private static readonly string[] _LiteralNames = {
		null, "'START'", "'END'", "'BYTE'", null, null, null, null, null, "'\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "RSUB", "INSTRUCCIONES", "TIPODIRECTIVA", "BYTEOP", 
		"NUM", "FINL", "NUMH", "NUMHH", "ID", "INDEX", "SEP"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SicGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SicGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SicGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SicGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ProgramaContext : ParserRuleContext {
		public InicioContext inicio() {
			return GetRuleContext<InicioContext>(0);
		}
		public FinContext fin() {
			return GetRuleContext<FinContext>(0);
		}
		public ProposicionContext[] proposicion() {
			return GetRuleContexts<ProposicionContext>();
		}
		public ProposicionContext proposicion(int i) {
			return GetRuleContext<ProposicionContext>(i);
		}
		public ProgramaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programa; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISicGrammarListener typedListener = listener as ISicGrammarListener;
			if (typedListener != null) typedListener.EnterPrograma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISicGrammarListener typedListener = listener as ISicGrammarListener;
			if (typedListener != null) typedListener.ExitPrograma(this);
		}
	}

	[RuleVersion(0)]
	public ProgramaContext programa() {
		ProgramaContext _localctx = new ProgramaContext(Context, State);
		EnterRule(_localctx, 0, RULE_programa);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 12; inicio();
			State = 14;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 13; proposicion();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 16;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 18; fin();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InicioContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(SicGrammarParser.ID, 0); }
		public ITerminalNode[] SEP() { return GetTokens(SicGrammarParser.SEP); }
		public ITerminalNode SEP(int i) {
			return GetToken(SicGrammarParser.SEP, i);
		}
		public ITerminalNode NUM() { return GetToken(SicGrammarParser.NUM, 0); }
		public ITerminalNode FINL() { return GetToken(SicGrammarParser.FINL, 0); }
		public InicioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inicio; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISicGrammarListener typedListener = listener as ISicGrammarListener;
			if (typedListener != null) typedListener.EnterInicio(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISicGrammarListener typedListener = listener as ISicGrammarListener;
			if (typedListener != null) typedListener.ExitInicio(this);
		}
	}

	[RuleVersion(0)]
	public InicioContext inicio() {
		InicioContext _localctx = new InicioContext(Context, State);
		EnterRule(_localctx, 2, RULE_inicio);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20; Match(ID);
			State = 21; Match(SEP);
			State = 22; Match(T__0);
			State = 23; Match(SEP);
			State = 24; Match(NUM);
			State = 25; Match(FINL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinContext : ParserRuleContext {
		public ITerminalNode[] SEP() { return GetTokens(SicGrammarParser.SEP); }
		public ITerminalNode SEP(int i) {
			return GetToken(SicGrammarParser.SEP, i);
		}
		public ITerminalNode ID() { return GetToken(SicGrammarParser.ID, 0); }
		public ITerminalNode FINL() { return GetToken(SicGrammarParser.FINL, 0); }
		public FinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fin; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISicGrammarListener typedListener = listener as ISicGrammarListener;
			if (typedListener != null) typedListener.EnterFin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISicGrammarListener typedListener = listener as ISicGrammarListener;
			if (typedListener != null) typedListener.ExitFin(this);
		}
	}

	[RuleVersion(0)]
	public FinContext fin() {
		FinContext _localctx = new FinContext(Context, State);
		EnterRule(_localctx, 4, RULE_fin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27; Match(SEP);
			State = 28; Match(T__1);
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEP) {
				{
				State = 29; Match(SEP);
				State = 30; Match(ID);
				}
			}

			State = 34;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINL) {
				{
				State = 33; Match(FINL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProposicionContext : ParserRuleContext {
		public ITerminalNode FINL() { return GetToken(SicGrammarParser.FINL, 0); }
		public InstruccionContext instruccion() {
			return GetRuleContext<InstruccionContext>(0);
		}
		public DirectivaContext directiva() {
			return GetRuleContext<DirectivaContext>(0);
		}
		public ITerminalNode RSUB() { return GetToken(SicGrammarParser.RSUB, 0); }
		public ProposicionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proposicion; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISicGrammarListener typedListener = listener as ISicGrammarListener;
			if (typedListener != null) typedListener.EnterProposicion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISicGrammarListener typedListener = listener as ISicGrammarListener;
			if (typedListener != null) typedListener.ExitProposicion(this);
		}
	}

	[RuleVersion(0)]
	public ProposicionContext proposicion() {
		ProposicionContext _localctx = new ProposicionContext(Context, State);
		EnterRule(_localctx, 6, RULE_proposicion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 36; instruccion();
				}
				break;
			case 2:
				{
				State = 37; directiva();
				}
				break;
			case 3:
				{
				State = 38; Match(RSUB);
				}
				break;
			}
			State = 41; Match(FINL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstruccionContext : ParserRuleContext {
		public ITerminalNode[] SEP() { return GetTokens(SicGrammarParser.SEP); }
		public ITerminalNode SEP(int i) {
			return GetToken(SicGrammarParser.SEP, i);
		}
		public ITerminalNode INSTRUCCIONES() { return GetToken(SicGrammarParser.INSTRUCCIONES, 0); }
		public ITerminalNode[] ID() { return GetTokens(SicGrammarParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(SicGrammarParser.ID, i);
		}
		public ITerminalNode INDEX() { return GetToken(SicGrammarParser.INDEX, 0); }
		public InstruccionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruccion; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISicGrammarListener typedListener = listener as ISicGrammarListener;
			if (typedListener != null) typedListener.EnterInstruccion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISicGrammarListener typedListener = listener as ISicGrammarListener;
			if (typedListener != null) typedListener.ExitInstruccion(this);
		}
	}

	[RuleVersion(0)]
	public InstruccionContext instruccion() {
		InstruccionContext _localctx = new InstruccionContext(Context, State);
		EnterRule(_localctx, 8, RULE_instruccion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 43; Match(ID);
				}
			}

			State = 46; Match(SEP);
			State = 47; Match(INSTRUCCIONES);
			State = 48; Match(SEP);
			State = 49; Match(ID);
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDEX) {
				{
				State = 50; Match(INDEX);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectivaContext : ParserRuleContext {
		public ITerminalNode[] SEP() { return GetTokens(SicGrammarParser.SEP); }
		public ITerminalNode SEP(int i) {
			return GetToken(SicGrammarParser.SEP, i);
		}
		public ITerminalNode BYTEOP() { return GetToken(SicGrammarParser.BYTEOP, 0); }
		public ITerminalNode ID() { return GetToken(SicGrammarParser.ID, 0); }
		public ITerminalNode TIPODIRECTIVA() { return GetToken(SicGrammarParser.TIPODIRECTIVA, 0); }
		public ITerminalNode NUM() { return GetToken(SicGrammarParser.NUM, 0); }
		public DirectivaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directiva; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISicGrammarListener typedListener = listener as ISicGrammarListener;
			if (typedListener != null) typedListener.EnterDirectiva(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISicGrammarListener typedListener = listener as ISicGrammarListener;
			if (typedListener != null) typedListener.ExitDirectiva(this);
		}
	}

	[RuleVersion(0)]
	public DirectivaContext directiva() {
		DirectivaContext _localctx = new DirectivaContext(Context, State);
		EnterRule(_localctx, 10, RULE_directiva);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 53; Match(ID);
				}
			}

			State = 56; Match(SEP);
			State = 63;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				{
				State = 57; Match(T__2);
				State = 58; Match(SEP);
				State = 59; Match(BYTEOP);
				}
				break;
			case TIPODIRECTIVA:
				{
				{
				State = 60; Match(TIPODIRECTIVA);
				State = 61; Match(SEP);
				State = 62; Match(NUM);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x10', '\x44', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x3', '\x2', '\x3', '\x2', 
		'\x6', '\x2', '\x11', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x12', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\"', '\n', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '%', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', '*', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\x5', '\x6', '/', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x36', '\n', 
		'\x6', '\x3', '\a', '\x5', '\a', '\x39', '\n', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', '\x42', '\n', '\a', '\x3', '\a', '\x2', '\x2', '\b', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\x2', '\x2', '\x2', '\x46', '\x2', '\xE', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x16', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x1D', '\x3', '\x2', '\x2', '\x2', '\b', ')', '\x3', '\x2', '\x2', 
		'\x2', '\n', '.', '\x3', '\x2', '\x2', '\x2', '\f', '\x38', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\x10', '\x5', '\x4', '\x3', '\x2', '\xF', '\x11', 
		'\x5', '\b', '\x5', '\x2', '\x10', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x11', '\x12', '\x3', '\x2', '\x2', '\x2', '\x12', '\x10', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x13', '\x3', '\x2', '\x2', '\x2', '\x13', '\x14', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\x15', '\x5', '\x6', '\x4', '\x2', 
		'\x15', '\x3', '\x3', '\x2', '\x2', '\x2', '\x16', '\x17', '\a', '\xE', 
		'\x2', '\x2', '\x17', '\x18', '\a', '\x10', '\x2', '\x2', '\x18', '\x19', 
		'\a', '\x3', '\x2', '\x2', '\x19', '\x1A', '\a', '\x10', '\x2', '\x2', 
		'\x1A', '\x1B', '\a', '\n', '\x2', '\x2', '\x1B', '\x1C', '\a', '\v', 
		'\x2', '\x2', '\x1C', '\x5', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', 
		'\a', '\x10', '\x2', '\x2', '\x1E', '!', '\a', '\x4', '\x2', '\x2', '\x1F', 
		' ', '\a', '\x10', '\x2', '\x2', ' ', '\"', '\a', '\xE', '\x2', '\x2', 
		'!', '\x1F', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\x3', '\x2', '\x2', 
		'\x2', '\"', '$', '\x3', '\x2', '\x2', '\x2', '#', '%', '\a', '\v', '\x2', 
		'\x2', '$', '#', '\x3', '\x2', '\x2', '\x2', '$', '%', '\x3', '\x2', '\x2', 
		'\x2', '%', '\a', '\x3', '\x2', '\x2', '\x2', '&', '*', '\x5', '\n', '\x6', 
		'\x2', '\'', '*', '\x5', '\f', '\a', '\x2', '(', '*', '\a', '\x6', '\x2', 
		'\x2', ')', '&', '\x3', '\x2', '\x2', '\x2', ')', '\'', '\x3', '\x2', 
		'\x2', '\x2', ')', '(', '\x3', '\x2', '\x2', '\x2', '*', '+', '\x3', '\x2', 
		'\x2', '\x2', '+', ',', '\a', '\v', '\x2', '\x2', ',', '\t', '\x3', '\x2', 
		'\x2', '\x2', '-', '/', '\a', '\xE', '\x2', '\x2', '.', '-', '\x3', '\x2', 
		'\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x31', '\a', '\x10', '\x2', '\x2', '\x31', 
		'\x32', '\a', '\a', '\x2', '\x2', '\x32', '\x33', '\a', '\x10', '\x2', 
		'\x2', '\x33', '\x35', '\a', '\xE', '\x2', '\x2', '\x34', '\x36', '\a', 
		'\xF', '\x2', '\x2', '\x35', '\x34', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x36', '\x3', '\x2', '\x2', '\x2', '\x36', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\x39', '\a', '\xE', '\x2', '\x2', '\x38', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x39', '\x3', '\x2', '\x2', '\x2', '\x39', 
		':', '\x3', '\x2', '\x2', '\x2', ':', '\x41', '\a', '\x10', '\x2', '\x2', 
		';', '<', '\a', '\x5', '\x2', '\x2', '<', '=', '\a', '\x10', '\x2', '\x2', 
		'=', '\x42', '\a', '\t', '\x2', '\x2', '>', '?', '\a', '\b', '\x2', '\x2', 
		'?', '@', '\a', '\x10', '\x2', '\x2', '@', '\x42', '\a', '\n', '\x2', 
		'\x2', '\x41', ';', '\x3', '\x2', '\x2', '\x2', '\x41', '>', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\r', '\x3', '\x2', '\x2', '\x2', '\n', '\x12', 
		'!', '$', ')', '.', '\x35', '\x38', '\x41',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
