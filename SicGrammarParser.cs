//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\SicGrammar.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class SicGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, RSUB=7, TIPODIRECTIVA=8, 
		BYTEOP=9, NUM=10, FINL=11, NUMH=12, NUMHH=13, ID=14, INDEX=15, SEP=16, 
		INSTRUNO=17, INSFDOSRN=18, INSFDOSR=19, INSFDOSRR=20, INSTRES=21, REG=22, 
		MODIR=23;
	public const int
		RULE_programa = 0, RULE_inicio = 1, RULE_fin = 2, RULE_proposicion = 3, 
		RULE_instruccion = 4, RULE_formatuno = 5, RULE_formatdos = 6, RULE_formatres = 7, 
		RULE_directiva = 8;
	public static readonly string[] ruleNames = {
		"programa", "inicio", "fin", "proposicion", "instruccion", "formatuno", 
		"formatdos", "formatres", "directiva"
	};

	private static readonly string[] _LiteralNames = {
		null, "'START'", "'END'", "'+'", "','", "'SVC'", "'BYTE'", null, null, 
		null, null, "'\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "RSUB", "TIPODIRECTIVA", "BYTEOP", 
		"NUM", "FINL", "NUMH", "NUMHH", "ID", "INDEX", "SEP", "INSTRUNO", "INSFDOSRN", 
		"INSFDOSR", "INSFDOSRR", "INSTRES", "REG", "MODIR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SicGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SicGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SicGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SicGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ProgramaContext : ParserRuleContext {
		public InicioContext inicio() {
			return GetRuleContext<InicioContext>(0);
		}
		public FinContext fin() {
			return GetRuleContext<FinContext>(0);
		}
		public ProposicionContext[] proposicion() {
			return GetRuleContexts<ProposicionContext>();
		}
		public ProposicionContext proposicion(int i) {
			return GetRuleContext<ProposicionContext>(i);
		}
		public ProgramaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programa; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISicGrammarListener typedListener = listener as ISicGrammarListener;
			if (typedListener != null) typedListener.EnterPrograma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISicGrammarListener typedListener = listener as ISicGrammarListener;
			if (typedListener != null) typedListener.ExitPrograma(this);
		}
	}

	[RuleVersion(0)]
	public ProgramaContext programa() {
		ProgramaContext _localctx = new ProgramaContext(Context, State);
		EnterRule(_localctx, 0, RULE_programa);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 18; inicio();
			State = 20;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 19; proposicion();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 22;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 24; fin();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InicioContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(SicGrammarParser.ID, 0); }
		public ITerminalNode[] SEP() { return GetTokens(SicGrammarParser.SEP); }
		public ITerminalNode SEP(int i) {
			return GetToken(SicGrammarParser.SEP, i);
		}
		public ITerminalNode NUM() { return GetToken(SicGrammarParser.NUM, 0); }
		public ITerminalNode FINL() { return GetToken(SicGrammarParser.FINL, 0); }
		public InicioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inicio; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISicGrammarListener typedListener = listener as ISicGrammarListener;
			if (typedListener != null) typedListener.EnterInicio(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISicGrammarListener typedListener = listener as ISicGrammarListener;
			if (typedListener != null) typedListener.ExitInicio(this);
		}
	}

	[RuleVersion(0)]
	public InicioContext inicio() {
		InicioContext _localctx = new InicioContext(Context, State);
		EnterRule(_localctx, 2, RULE_inicio);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26; Match(ID);
			State = 27; Match(SEP);
			State = 28; Match(T__0);
			State = 29; Match(SEP);
			State = 30; Match(NUM);
			State = 31; Match(FINL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinContext : ParserRuleContext {
		public ITerminalNode[] SEP() { return GetTokens(SicGrammarParser.SEP); }
		public ITerminalNode SEP(int i) {
			return GetToken(SicGrammarParser.SEP, i);
		}
		public ITerminalNode ID() { return GetToken(SicGrammarParser.ID, 0); }
		public ITerminalNode FINL() { return GetToken(SicGrammarParser.FINL, 0); }
		public FinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fin; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISicGrammarListener typedListener = listener as ISicGrammarListener;
			if (typedListener != null) typedListener.EnterFin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISicGrammarListener typedListener = listener as ISicGrammarListener;
			if (typedListener != null) typedListener.ExitFin(this);
		}
	}

	[RuleVersion(0)]
	public FinContext fin() {
		FinContext _localctx = new FinContext(Context, State);
		EnterRule(_localctx, 4, RULE_fin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33; Match(SEP);
			State = 34; Match(T__1);
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEP) {
				{
				State = 35; Match(SEP);
				State = 36; Match(ID);
				}
			}

			State = 40;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINL) {
				{
				State = 39; Match(FINL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProposicionContext : ParserRuleContext {
		public ITerminalNode FINL() { return GetToken(SicGrammarParser.FINL, 0); }
		public InstruccionContext instruccion() {
			return GetRuleContext<InstruccionContext>(0);
		}
		public DirectivaContext directiva() {
			return GetRuleContext<DirectivaContext>(0);
		}
		public ITerminalNode RSUB() { return GetToken(SicGrammarParser.RSUB, 0); }
		public ProposicionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proposicion; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISicGrammarListener typedListener = listener as ISicGrammarListener;
			if (typedListener != null) typedListener.EnterProposicion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISicGrammarListener typedListener = listener as ISicGrammarListener;
			if (typedListener != null) typedListener.ExitProposicion(this);
		}
	}

	[RuleVersion(0)]
	public ProposicionContext proposicion() {
		ProposicionContext _localctx = new ProposicionContext(Context, State);
		EnterRule(_localctx, 6, RULE_proposicion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 42; instruccion();
				}
				break;
			case 2:
				{
				State = 43; directiva();
				}
				break;
			case 3:
				{
				State = 44; Match(RSUB);
				}
				break;
			}
			State = 47; Match(FINL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstruccionContext : ParserRuleContext {
		public ITerminalNode SEP() { return GetToken(SicGrammarParser.SEP, 0); }
		public FormatunoContext formatuno() {
			return GetRuleContext<FormatunoContext>(0);
		}
		public FormatdosContext formatdos() {
			return GetRuleContext<FormatdosContext>(0);
		}
		public ITerminalNode ID() { return GetToken(SicGrammarParser.ID, 0); }
		public FormatresContext formatres() {
			return GetRuleContext<FormatresContext>(0);
		}
		public InstruccionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruccion; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISicGrammarListener typedListener = listener as ISicGrammarListener;
			if (typedListener != null) typedListener.EnterInstruccion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISicGrammarListener typedListener = listener as ISicGrammarListener;
			if (typedListener != null) typedListener.ExitInstruccion(this);
		}
	}

	[RuleVersion(0)]
	public InstruccionContext instruccion() {
		InstruccionContext _localctx = new InstruccionContext(Context, State);
		EnterRule(_localctx, 8, RULE_instruccion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 49; Match(ID);
				}
			}

			State = 52; Match(SEP);
			State = 59;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INSTRUNO:
				{
				State = 53; formatuno();
				}
				break;
			case T__4:
			case INSFDOSRN:
			case INSFDOSR:
			case INSFDOSRR:
				{
				State = 54; formatdos();
				}
				break;
			case T__2:
			case INSTRES:
				{
				{
				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 55; Match(T__2);
					}
				}

				State = 58; formatres();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormatunoContext : ParserRuleContext {
		public ITerminalNode INSTRUNO() { return GetToken(SicGrammarParser.INSTRUNO, 0); }
		public FormatunoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formatuno; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISicGrammarListener typedListener = listener as ISicGrammarListener;
			if (typedListener != null) typedListener.EnterFormatuno(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISicGrammarListener typedListener = listener as ISicGrammarListener;
			if (typedListener != null) typedListener.ExitFormatuno(this);
		}
	}

	[RuleVersion(0)]
	public FormatunoContext formatuno() {
		FormatunoContext _localctx = new FormatunoContext(Context, State);
		EnterRule(_localctx, 10, RULE_formatuno);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; Match(INSTRUNO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormatdosContext : ParserRuleContext {
		public ITerminalNode INSFDOSRR() { return GetToken(SicGrammarParser.INSFDOSRR, 0); }
		public ITerminalNode[] SEP() { return GetTokens(SicGrammarParser.SEP); }
		public ITerminalNode SEP(int i) {
			return GetToken(SicGrammarParser.SEP, i);
		}
		public ITerminalNode[] REG() { return GetTokens(SicGrammarParser.REG); }
		public ITerminalNode REG(int i) {
			return GetToken(SicGrammarParser.REG, i);
		}
		public ITerminalNode INSFDOSRN() { return GetToken(SicGrammarParser.INSFDOSRN, 0); }
		public ITerminalNode NUM() { return GetToken(SicGrammarParser.NUM, 0); }
		public ITerminalNode INSFDOSR() { return GetToken(SicGrammarParser.INSFDOSR, 0); }
		public FormatdosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formatdos; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISicGrammarListener typedListener = listener as ISicGrammarListener;
			if (typedListener != null) typedListener.EnterFormatdos(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISicGrammarListener typedListener = listener as ISicGrammarListener;
			if (typedListener != null) typedListener.ExitFormatdos(this);
		}
	}

	[RuleVersion(0)]
	public FormatdosContext formatdos() {
		FormatdosContext _localctx = new FormatdosContext(Context, State);
		EnterRule(_localctx, 12, RULE_formatdos);
		try {
			State = 91;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INSFDOSRR:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 63; Match(INSFDOSRR);
				State = 64; Match(SEP);
				State = 65; Match(REG);
				State = 66; Match(SEP);
				State = 67; Match(T__3);
				State = 68; Match(SEP);
				State = 69; Match(REG);
				}
				}
				break;
			case INSFDOSRN:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 70; Match(INSFDOSRN);
				State = 71; Match(SEP);
				State = 72; Match(REG);
				State = 73; Match(SEP);
				State = 74; Match(T__3);
				State = 75; Match(SEP);
				State = 76; Match(NUM);
				}
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 77; Match(T__4);
				State = 78; Match(SEP);
				State = 79; Match(REG);
				State = 80; Match(SEP);
				State = 81; Match(T__3);
				State = 82; Match(SEP);
				State = 83; Match(NUM);
				}
				}
				break;
			case INSFDOSR:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 84; Match(INSFDOSR);
				State = 85; Match(SEP);
				State = 86; Match(REG);
				State = 87; Match(SEP);
				State = 88; Match(T__3);
				State = 89; Match(SEP);
				State = 90; Match(NUM);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormatresContext : ParserRuleContext {
		public ITerminalNode INSTRES() { return GetToken(SicGrammarParser.INSTRES, 0); }
		public ITerminalNode SEP() { return GetToken(SicGrammarParser.SEP, 0); }
		public ITerminalNode ID() { return GetToken(SicGrammarParser.ID, 0); }
		public ITerminalNode MODIR() { return GetToken(SicGrammarParser.MODIR, 0); }
		public ITerminalNode INDEX() { return GetToken(SicGrammarParser.INDEX, 0); }
		public FormatresContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formatres; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISicGrammarListener typedListener = listener as ISicGrammarListener;
			if (typedListener != null) typedListener.EnterFormatres(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISicGrammarListener typedListener = listener as ISicGrammarListener;
			if (typedListener != null) typedListener.ExitFormatres(this);
		}
	}

	[RuleVersion(0)]
	public FormatresContext formatres() {
		FormatresContext _localctx = new FormatresContext(Context, State);
		EnterRule(_localctx, 14, RULE_formatres);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; Match(INSTRES);
			State = 94; Match(SEP);
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MODIR) {
				{
				State = 95; Match(MODIR);
				}
			}

			State = 98; Match(ID);
			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDEX) {
				{
				State = 99; Match(INDEX);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectivaContext : ParserRuleContext {
		public ITerminalNode[] SEP() { return GetTokens(SicGrammarParser.SEP); }
		public ITerminalNode SEP(int i) {
			return GetToken(SicGrammarParser.SEP, i);
		}
		public ITerminalNode BYTEOP() { return GetToken(SicGrammarParser.BYTEOP, 0); }
		public ITerminalNode ID() { return GetToken(SicGrammarParser.ID, 0); }
		public ITerminalNode TIPODIRECTIVA() { return GetToken(SicGrammarParser.TIPODIRECTIVA, 0); }
		public ITerminalNode NUM() { return GetToken(SicGrammarParser.NUM, 0); }
		public DirectivaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directiva; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISicGrammarListener typedListener = listener as ISicGrammarListener;
			if (typedListener != null) typedListener.EnterDirectiva(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISicGrammarListener typedListener = listener as ISicGrammarListener;
			if (typedListener != null) typedListener.ExitDirectiva(this);
		}
	}

	[RuleVersion(0)]
	public DirectivaContext directiva() {
		DirectivaContext _localctx = new DirectivaContext(Context, State);
		EnterRule(_localctx, 16, RULE_directiva);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 102; Match(ID);
				}
			}

			State = 105; Match(SEP);
			State = 112;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
				{
				State = 106; Match(T__5);
				State = 107; Match(SEP);
				State = 108; Match(BYTEOP);
				}
				break;
			case TIPODIRECTIVA:
				{
				{
				State = 109; Match(TIPODIRECTIVA);
				State = 110; Match(SEP);
				State = 111; Match(NUM);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x19', 'u', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x3', '\x2', '\x3', 
		'\x2', '\x6', '\x2', '\x17', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x18', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '(', '\n', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '+', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', '\x30', '\n', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x5', '\x6', '\x35', '\n', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', ';', '\n', '\x6', 
		'\x3', '\x6', '\x5', '\x6', '>', '\n', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', '^', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x5', '\t', '\x63', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		'g', '\n', '\t', '\x3', '\n', '\x5', '\n', 'j', '\n', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x5', '\n', 's', '\n', '\n', '\x3', '\n', '\x2', '\x2', '\v', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x2', '\x2', '\x2', 
		'{', '\x2', '\x14', '\x3', '\x2', '\x2', '\x2', '\x4', '\x1C', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '#', '\x3', '\x2', '\x2', '\x2', '\b', '/', 
		'\x3', '\x2', '\x2', '\x2', '\n', '\x34', '\x3', '\x2', '\x2', '\x2', 
		'\f', '?', '\x3', '\x2', '\x2', '\x2', '\xE', ']', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '_', '\x3', '\x2', '\x2', '\x2', '\x12', 'i', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x16', '\x5', '\x4', '\x3', '\x2', '\x15', '\x17', 
		'\x5', '\b', '\x5', '\x2', '\x16', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x17', '\x18', '\x3', '\x2', '\x2', '\x2', '\x18', '\x16', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x19', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1A', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', '\x5', '\x6', '\x4', '\x2', 
		'\x1B', '\x3', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\a', '\x10', 
		'\x2', '\x2', '\x1D', '\x1E', '\a', '\x12', '\x2', '\x2', '\x1E', '\x1F', 
		'\a', '\x3', '\x2', '\x2', '\x1F', ' ', '\a', '\x12', '\x2', '\x2', ' ', 
		'!', '\a', '\f', '\x2', '\x2', '!', '\"', '\a', '\r', '\x2', '\x2', '\"', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '#', '$', '\a', '\x12', '\x2', '\x2', 
		'$', '\'', '\a', '\x4', '\x2', '\x2', '%', '&', '\a', '\x12', '\x2', '\x2', 
		'&', '(', '\a', '\x10', '\x2', '\x2', '\'', '%', '\x3', '\x2', '\x2', 
		'\x2', '\'', '(', '\x3', '\x2', '\x2', '\x2', '(', '*', '\x3', '\x2', 
		'\x2', '\x2', ')', '+', '\a', '\r', '\x2', '\x2', '*', ')', '\x3', '\x2', 
		'\x2', '\x2', '*', '+', '\x3', '\x2', '\x2', '\x2', '+', '\a', '\x3', 
		'\x2', '\x2', '\x2', ',', '\x30', '\x5', '\n', '\x6', '\x2', '-', '\x30', 
		'\x5', '\x12', '\n', '\x2', '.', '\x30', '\a', '\t', '\x2', '\x2', '/', 
		',', '\x3', '\x2', '\x2', '\x2', '/', '-', '\x3', '\x2', '\x2', '\x2', 
		'/', '.', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x31', '\x32', '\a', '\r', '\x2', '\x2', '\x32', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x35', '\a', '\x10', '\x2', '\x2', '\x34', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x36', '\x3', '\x2', '\x2', '\x2', '\x36', '=', '\a', 
		'\x12', '\x2', '\x2', '\x37', '>', '\x5', '\f', '\a', '\x2', '\x38', '>', 
		'\x5', '\xE', '\b', '\x2', '\x39', ';', '\a', '\x5', '\x2', '\x2', ':', 
		'\x39', '\x3', '\x2', '\x2', '\x2', ':', ';', '\x3', '\x2', '\x2', '\x2', 
		';', '<', '\x3', '\x2', '\x2', '\x2', '<', '>', '\x5', '\x10', '\t', '\x2', 
		'=', '\x37', '\x3', '\x2', '\x2', '\x2', '=', '\x38', '\x3', '\x2', '\x2', 
		'\x2', '=', ':', '\x3', '\x2', '\x2', '\x2', '>', '\v', '\x3', '\x2', 
		'\x2', '\x2', '?', '@', '\a', '\x13', '\x2', '\x2', '@', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\x41', '\x42', '\a', '\x16', '\x2', '\x2', '\x42', 
		'\x43', '\a', '\x12', '\x2', '\x2', '\x43', '\x44', '\a', '\x18', '\x2', 
		'\x2', '\x44', '\x45', '\a', '\x12', '\x2', '\x2', '\x45', '\x46', '\a', 
		'\x6', '\x2', '\x2', '\x46', 'G', '\a', '\x12', '\x2', '\x2', 'G', '^', 
		'\a', '\x18', '\x2', '\x2', 'H', 'I', '\a', '\x14', '\x2', '\x2', 'I', 
		'J', '\a', '\x12', '\x2', '\x2', 'J', 'K', '\a', '\x18', '\x2', '\x2', 
		'K', 'L', '\a', '\x12', '\x2', '\x2', 'L', 'M', '\a', '\x6', '\x2', '\x2', 
		'M', 'N', '\a', '\x12', '\x2', '\x2', 'N', '^', '\a', '\f', '\x2', '\x2', 
		'O', 'P', '\a', '\a', '\x2', '\x2', 'P', 'Q', '\a', '\x12', '\x2', '\x2', 
		'Q', 'R', '\a', '\x18', '\x2', '\x2', 'R', 'S', '\a', '\x12', '\x2', '\x2', 
		'S', 'T', '\a', '\x6', '\x2', '\x2', 'T', 'U', '\a', '\x12', '\x2', '\x2', 
		'U', '^', '\a', '\f', '\x2', '\x2', 'V', 'W', '\a', '\x15', '\x2', '\x2', 
		'W', 'X', '\a', '\x12', '\x2', '\x2', 'X', 'Y', '\a', '\x18', '\x2', '\x2', 
		'Y', 'Z', '\a', '\x12', '\x2', '\x2', 'Z', '[', '\a', '\x6', '\x2', '\x2', 
		'[', '\\', '\a', '\x12', '\x2', '\x2', '\\', '^', '\a', '\f', '\x2', '\x2', 
		']', '\x41', '\x3', '\x2', '\x2', '\x2', ']', 'H', '\x3', '\x2', '\x2', 
		'\x2', ']', 'O', '\x3', '\x2', '\x2', '\x2', ']', 'V', '\x3', '\x2', '\x2', 
		'\x2', '^', '\xF', '\x3', '\x2', '\x2', '\x2', '_', '`', '\a', '\x17', 
		'\x2', '\x2', '`', '\x62', '\a', '\x12', '\x2', '\x2', '\x61', '\x63', 
		'\a', '\x19', '\x2', '\x2', '\x62', '\x61', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x63', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x66', '\a', '\x10', '\x2', '\x2', '\x65', 'g', 
		'\a', '\x11', '\x2', '\x2', '\x66', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'\x66', 'g', '\x3', '\x2', '\x2', '\x2', 'g', '\x11', '\x3', '\x2', '\x2', 
		'\x2', 'h', 'j', '\a', '\x10', '\x2', '\x2', 'i', 'h', '\x3', '\x2', '\x2', 
		'\x2', 'i', 'j', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x3', '\x2', '\x2', 
		'\x2', 'k', 'r', '\a', '\x12', '\x2', '\x2', 'l', 'm', '\a', '\b', '\x2', 
		'\x2', 'm', 'n', '\a', '\x12', '\x2', '\x2', 'n', 's', '\a', '\v', '\x2', 
		'\x2', 'o', 'p', '\a', '\n', '\x2', '\x2', 'p', 'q', '\a', '\x12', '\x2', 
		'\x2', 'q', 's', '\a', '\f', '\x2', '\x2', 'r', 'l', '\x3', '\x2', '\x2', 
		'\x2', 'r', 'o', '\x3', '\x2', '\x2', '\x2', 's', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\x18', '\'', '*', '/', '\x34', ':', '=', ']', '\x62', 
		'\x66', 'i', 'r',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
